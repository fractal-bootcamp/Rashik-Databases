// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String  @id @default(uuid()) @db.Uuid
  fullName  String
  username  String  @unique
  email     String  @unique
  password  String
  biography String  @default("")
  posts     Posts[]

  @@map("users")
}

model Posts {
  id      String @id @default(uuid()) @db.Uuid
  userId  String
  postId  String
  content String

  // reference ids
  usersId String? @db.Uuid

  // references
  Users Users? @relation(fields: [usersId], references: [id])

  @@map("posts")
}

model Followers {
  id         String @id @default(uuid()) @db.Uuid
  userId     String
  followerId String

  @@map("followers")
}

model Likes {
  id     String @id @default(uuid()) @db.Uuid
  userId String
  postId String

  @@map("likes")
}

model Comments {
  id      String @id @default(uuid()) @db.Uuid
  userId  String
  postId  String
  content String

  @@map("comments")
}

model Books {
  id String @id @default(uuid()) @db.Uuid

  // core attributes
  title      String
  author     String
  ISBN       String
  borrowerId String

  // reference ids
  authorId String? @db.Uuid

  // references
  Author Authors? @relation(fields: [authorId], references: [id])
  Genres Genres[]

  @@map("books")
}

model Authors {
  id String @id @default(uuid()) @db.Uuid

  // core attributes
  name      String
  biography String

  // reference ids
  authorId String? @db.Uuid
  Books    Books[]

  @@map("authors")
}

model AvailableGenres {
  id String @id @default(uuid()) @db.Uuid

  // core attributes
  genre  String   @unique
  Genres Genres[]

  @@map("availablegenres")
}

model Genres {
  id String @id @default(uuid()) @db.Uuid

  // core attributes
  genreId String           @db.Uuid
  bookId  String           @db.Uuid
  // references
  Genre   AvailableGenres? @relation(fields: [genreId], references: [id])
  Books   Books?           @relation(fields: [bookId], references: [id])

  @@map("genres")
}

model Members {
  id String @id @default(uuid()) @db.Uuid

  // core attributes
  name    String
  email   String
  address String

  // references
  Books Books? @relation(fields: [genre], references: [id])
}
